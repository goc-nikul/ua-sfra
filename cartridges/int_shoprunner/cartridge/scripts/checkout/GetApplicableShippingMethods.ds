var ArrayList = require('dw/util/ArrayList');
var Collection = require('dw/util/Collection');
var ShippingMgr = require('dw/order/ShippingMgr');
var StringUtils = require('dw/util/StringUtils');

/**
 * GetApplicableShippingMethods.ds
 *
 * This script retrieves the list of applicable shipping methods
 * for a given shipment and a full or partial shipping address.
 * A shipping method is applicable if it does not exclude any of 
 * the products in the shipment, and does not exclude the specified 
 * address.
 * 
 * @input Basket: dw.order.Basket
 * @input Country : String
 * @input State : String
 * @input PostalCode : String
 * @input City : String
 * @input Address1 : String
 * @input Address2 : String
 * @output ShippingMethods : Object The shipping methods.
 * @output DefaultShippingMethod : dw.order.ShippingMethod
 */

importScript("checkout/Utils.ds");

function execute (args) {
	var result = getMethods(args);
	args.DefaultShippingMethod = result.defaultShippingMethod;
	args.ShippingMethods = result.shippingMethods;
	return PIPELET_NEXT;
}

function getMethods(args) {
	var basket = args.Basket;
	var shipment = basket.defaultShipment;
	var address1 = args.Address1;
	var address2 = args.Address2;

	// country code
	var countryCode = args.Country;
	if (countryCode == null || StringUtils.trim(countryCode) == '') {
		// SiteGenesis-specific default used to define list of shipping methods shown by default.
		// Modify as needed.
		countryCode = 'US';
	} else {
		countryCode = StringUtils.trim(countryCode);
	}
	
	// state code
	var stateCode = args.State;
	if (stateCode == null || StringUtils.trim(stateCode) == "") {
		// SiteGenesis-specific default used to define list of shipping methods shown by default.
		// Modify as needed.
		stateCode = 'NY'; 
	} else {
		stateCode = StringUtils.trim(stateCode);
	}
	
	// postal code
	var postalCode = args.PostalCode;
	if (postalCode != null) {
		postalCode = StringUtils.trim(postalCode);	// no need for defaults
	}
	
	// city
	var city = args.City;
	if (city != null) {
		city = StringUtils.trim(city);  // no need for defaults
	}
	
	// Construct an address from request parameters.
	var addressObj = new Object();
	addressObj.countryCode = countryCode;
	addressObj.stateCode = stateCode;
	addressObj.postalCode = postalCode;
	addressObj.city = city;
	
	// Retrieve the list of applicabnle shipping methods for the given shipment and address.
	var shippingModel = ShippingMgr.getShipmentShippingModel(shipment);
	var ret = new ArrayList();
	ret = shippingModel.getApplicableShippingMethods(addressObj);
	
	// set the default shipping method
	var defaultShipping = basket.defaultShipment.getShippingMethod() || ShippingMgr.getDefaultShippingMethod();

	/* If "shoprunner" method is in the list, then we know that there are only shoprunner items 
	due to it's exclusion rules. 
	
	If this is the case, and the user is logged in
	then only show ShopRunner
	If this is the case and the user is not logged in, show messaging 
	*/
	var shoprunnerMethod = null;
	for (var index in ret) { 
		if (ret[index].ID == 'shoprunner') {
			shoprunnerMethod = ret[index]; 
		}
	}
	var srtoken = session.custom.srtoken;
	if (empty(srtoken)) {
    	var cookies = request.getHttpCookies();
	    for (var i = 0; i < cookies.cookieCount; i++) {
	    	var cookie = cookies[i];
	    	if (cookie.name == 'sr_token'){
	    	   srtoken = cookie.value;	
	    	   session.custom.srtoken = srtoken; 
	    	   break;
	    	}
	    }
    }
	
	// if not signed in, or POBox address remove shoprunner method
	if (shoprunnerMethod != null && (empty(srtoken) || srtoken.length < 1)) {
		//ret.remove(shoprunnerMethod);
	} else {
		if(shoprunnerMethod != null) {
			defaultShipping = shoprunnerMethod;
		}
	}
	
	return  {
		shippingMethods: ret,
		defaultShippingMethod: defaultShipping
	}
}

module.exports = {
    execute: execute,
	getMethods: getMethods
};
