/**
 * Helper to set default country based on TLD
 *
 * Usage: 
 * 		var CountryHelper = require("./CountryHelper");
 *		- OR -
 *		var CountryHelper = require("~/cartridge/scripts/util/CountryHelper");
 *
 *		var countryHelper = new CountryHelper();
 *		var defaultCountryCode = countryHelper.getDefaultCountryCode();
 */

importPackage( dw.system );
importPackage( dw.object );

var CountryHelper = function(objBasedOn : String, param : String, useCrossData : Boolean){
	
	var countryObject : Object = null,
		countryMap : Object = null,
		JSONUtils = require("~/cartridge/scripts/util/JSONUtils");
		// get the country JSON
		try {
			countryMap = JSON.parse(Site.getCurrent().getCustomPreferenceValue('countriesJSON'));
		} catch(ex) {
			Logger.error("CountryHelper.ds ERROR parsing JSON object from countryMapping site pref: " + ex);
		}
	
	//set country object based on locale, tld, etc.	
	switch(objBasedOn){
		case "locale":
			countryObject = getCountryObjectByLocale(countryMap, param);
			break;
		case "countryCode":
			countryObject = getCountryObjectByCountryCode(countryMap, param);
			break;
		default:
			countryObject = getCountryObjectByCurrentDomain(countryMap);
			break;
	}

	this.countryMappingObj = countryMap;
	if (!empty(countryObject)){	
		this.countryCode = countryObject.countryCode;
		this.locales = countryObject.locales;
		this.currency = countryObject.currencyCode;
		this.hostName = countryObject.hostname;
		this.preferredPriceBook = (!empty(countryObject.priceBooks)) ? countryObject.priceBooks : [];
	}  
};


CountryHelper.prototype = {	
	getCountryCode : function() {
		return this.countryCode;
	},
	
	getCountryCodeByLocale : function (locale : String) : String {
		var countryCode = !empty(locale) ? locale.slice(-2).toUpperCase() : "";
		return countryCode.equalsIgnoreCase("EN") ? "GB" : countryCode;
	},
	
	getCurrency : function() {
		return this.currency;
	},
	
	getHostName : function() {
		return this.hostName;
	},
	
	getAllowedLocales : function(){
		var allowedLocales : Array = ["default"];
		if(!empty(this.locales) && typeof(this.locales) != 'undefined'){
			return this.locales;
		}
	},
	
	getCountryMappingObj : function(){
		return this.countryMappingObj;
	}

}

/*******************
/* LOCAL FUNCTIONS 
/*******************/
function getCountryObjectByCurrentDomain(countryMap : Object) : Object {
	var countryMap : Object = countryMap;
	var currentDomain : String = "";
	var countryObject : Object = {};
	
	try{
		currentDomain = request.getHttpHost().toLowerCase();
	} catch (ex) {
		Logger.info("CountryHelper.ds INFO could not set current domain: " + ex);
		return;
	}
	
	
	top:
	for (var key in countryMap){
		var object : Object = countryMap[key];
		var host : Array = object.hostname;
		if(host === currentDomain) {
			countryObject = object;
			break top;
		}
	}
	return countryObject;
}

function getCountryObjectByLocale(countryMap : Object, localeID : String) : Object {
	var countryObject : Object = {};
	
	if(empty(localeID)){
		localeID = request.getHttpLocale();
	}
	
	
	top:
	for (var key in countryMap){
		var object : Object = countryMap[key];
		var locales : Array = object.locales;
		
		for (var localesKey in locales){
			var locale = locales[localesKey];
			if(locale == localeID){
				countryObject = object;
				break top;
			}
		}
	}
	
	return countryObject;
}

function getCountryObjectByCountryCode(countryMap : Object, countryCode : String) : Object {
	var countryObject : Object = {};
	
	if(empty(countryCode)){
		return null;
	}
	
	for (var key in countryMap){
		var object : Object = countryMap[key];
		var ccode : String = object.countryCode;
		
		if(ccode == countryCode){
			countryObject = object;
			break	
		}
	}
	
	return countryObject;
}

function getTopLevelDomain(currentDomain) : String {
	// http://data.iana.org/TLD/tlds-alpha-by-domain.txt
	var validTLDs : Array = ["ac", "academy", "actor", "ad", "ae", "aero", "af", "ag", "agency", "ai", "al", "am", "an", "ao", "aq", "ar", "arpa", "as", "asia", "at", "au", "aw", "ax", "axa", "az", "ba", "bar", "bargains", "bb", "bd", "be", "berlin", "best", "bf", "bg", "bh", "bi", "bid", "bike", "biz", "bj", "blue", "bm", "bn", "bo", "boutique", "br", "bs", "bt", "build", "builders", "buzz", "bv", "bw", "by", "bz", "ca", "cab", "camera", "camp", "cards", "careers", "cat", "catering", "cc", "cd", "center", "ceo", "cf", "cg", "ch", "cheap", "christmas", "ci", "ck", "cl", "cleaning", "clothing", "club", "cm", "cn", "co", "codes", "coffee", "cologne", "com", "community", "company", "computer", "condos", "construction", "contractors", "cool", "coop", "cr", "cruises", "cu", "cv", "cw", "cx", "cy", "cz", "dance", "dating", "de", "democrat", "diamonds", "directory", "dj", "dk", "dm", "dnp", "do", "domains", "dz", "ec", "edu", "education", "ee", "eg", "email", "enterprises", "equipment", "er", "es", "estate", "et", "eu", "events", "expert", "exposed", "farm", "fi", "fish", "fj", "fk", "flights", "florist", "fm", "fo", "foundation", "fr", "futbol", "ga", "gallery", "gb", "gd", "ge", "gf", "gg", "gh", "gi", "gift", "gl", "glass", "gm", "gn", "gov", "gp", "gq", "gr", "graphics", "gs", "gt", "gu", "guitars", "guru", "gw", "gy", "hk", "hm", "hn", "holdings", "holiday", "house", "hr", "ht", "hu", "id", "ie", "il", "im", "immobilien", "in", "industries", "info", "ink", "institute", "int", "international", "io", "iq", "ir", "is", "it", "je", "jetzt", "jm", "jo", "jobs", "jp", "kaufen", "ke", "kg", "kh", "ki", "kim", "kitchen", "kiwi", "km", "kn", "koeln", "kp", "kr", "kred", "kw", "ky", "kz", "la", "land", "lb", "lc", "li", "lighting", "limo", "link", "lk", "london", "lr", "ls", "lt", "lu", "luxury", "lv", "ly", "ma", "maison", "management", "mango", "marketing", "mc", "md", "me", "menu", "mg", "mh", "mil", "mk", "ml", "mm", "mn", "mo", "mobi", "moda", "monash", "mp", "mq", "mr", "ms", "mt", "mu", "museum", "mv", "mw", "mx", "my", "mz", "na", "nagoya", "name", "nc", "ne", "net", "neustar", "nf", "ng", "ni", "ninja", "nl", "no", "np", "nr", "nu", "nyc", "nz", "okinawa", "om", "onl", "org", "pa", "partners", "parts", "pe", "pf", "pg", "ph", "photo", "photography", "photos", "pics", "pink", "pk", "pl", "plumbing", "pm", "pn", "post", "pr", "pro", "productions", "properties", "ps", "pt", "pub", "pw", "py", "qa", "qpon", "re", "recipes", "red", "rentals", "repair", "report", "reviews", "rich", "ro", "rs", "ru", "ruhr", "rw", "sa", "sb", "sc", "sd", "se", "sexy", "sg", "sh", "shiksha", "shoes", "si", "singles", "sj", "sk", "sl", "sm", "sn", "so", "social", "solar", "solutions", "sr", "st", "su", "supplies", "supply", "support", "sv", "sx", "sy", "systems", "sz", "tattoo", "tc", "td", "technology", "tel", "tf", "tg", "th", "tienda", "tips", "tj", "tk", "tl", "tm", "tn", "to", "today", "tokyo", "tools", "tp", "tr", "trade", "training", "travel", "tt", "tv", "tw", "tz", "ua", "ug", "uk", "uno", "us", "uy", "uz", "va", "vacations", "vc", "ve", "ventures", "vg", "vi", "viajes", "villas", "vision", "vn", "vote", "voting", "voto", "voyage", "vu", "wang", "watch", "webcam", "wed", "wf", "wien", "wiki", "works", "ws", "xn--3bst00m", "xn--3ds443g", "xn--3e0b707e", "xn--45brj9c", "xn--55qw42g", "xn--55qx5d", "xn--6frz82g", "xn--6qq986b3xl", "xn--80ao21a", "xn--80asehdb", "xn--80aswg", "xn--90a3ac", "xn--c1avg", "xn--cg4bki", "xn--clchc0ea0b2g2a9gcd", "xn--d1acj3b", "xn--fiq228c5hs", "xn--fiq64b", "xn--fiqs8s", "xn--fiqz9s", "xn--fpcrj9c3d", "xn--fzc2c9e2c", "xn--gecrj9c", "xn--h2brj9c", "xn--i1b6b1a6a2e", "xn--io0a7i", "xn--j1amh", "xn--j6w193g", "xn--kprw13d", "xn--kpry57d", "xn--l1acc", "xn--lgbbat1ad8j", "xn--mgb9awbf", "xn--mgba3a4f16a", "xn--mgbaam7a8h", "xn--mgbab2bd", "xn--mgbayh7gpa", "xn--mgbbh1a71e", "xn--mgbc0a9azcg", "xn--mgberp4a5d4ar", "xn--mgbx4cd0ab", "xn--ngbc5azd", "xn--nqv7f", "xn--nqv7fs00ema", "xn--o3cw4h", "xn--ogbpf8fl", "xn--p1ai", "xn--pgbs0dh", "xn--q9jyb4c", "xn--rhqv96g", "xn--s9brj9c", "xn--unup4y", "xn--wgbh1c", "xn--wgbl6a", "xn--xkc2al3hye2a", "xn--xkc2dl3a5ee0h", "xn--yfro4i67o", "xn--ygbi2ammx", "xn--zfr164b", "xxx", "xyz", "ye", "yt", "za", "zm", "zone", "zw"].join();
	var TLD : String = "";
	var parts : Array = currentDomain.split('.');
	for (var i = parts.length - 1; i >= 0; i--) {
		if(validTLDs.indexOf(parts[i]) > 0) {
			TLD = parts[i];
			break;
		}
	}
	return TLD;
}

module.exports = CountryHelper;