'use strict';

var constants = require('./constants');
var selectors = constants.selectors;
var events = constants.events;

/**
 * Address completion with Paazl service
 * @param {string} scope - the form selector
 *
 * @description After both postal code and house number have been provided,
 * a call will be made to Paazl to retrieve a complete address. The
 * response will be cached in a variable. The street and city fields will
 * be cleared if no valid response is found.
 */
function assign(scope) {
    var Model = this;

    /**
    * @var {Array<string>} addressCompletionFields
    * Required fields for the Paazl request
    */
    Model.addressCompletionFields = [selectors.address.postalCode, selectors.address.houseNumber, selectors.address.country];

    /**
    * @var {String} activeCountryCodes
    * Country code input selector to verify the address country
    */
    Model.isCountryNL = false;

    /**
    * @var {Array<Object>} cachedResults
    * All responses will be stored in this variable
    */
    Model.cachedResults = [];

    /**
    * @var {HTMLElement} currentForm
    * The current form
    */
    Model.currentForm = null;

    /**
    * @var {String} countryFieldEl
    * Country code element to verify the address country
    */
    Model.countryFieldEl = null;

    /**
    * @var {string} addressServiceUrl
    * The service URL
    */
    Model.addressServiceUrl = selectors.addressService && selectors.attrs.addressServiceUrl && $(selectors.addressService)[0] ? $(selectors.addressService).attr(selectors.attrs.addressServiceUrl) : false; // eslint-disable-line

    /**
    * @var {string} locationKey
    * A key generated by user input, used to identify cached results
    */
    Model.locationKey = '';

    /**
    * @var {string} scope
    * A selector to scope the form.
    */
    Model.scope = scope || window;

    Model.clearAddressFields = clearAddressFields; // eslint-disable-line no-use-before-define
    Model.completeAddressService = completeAddressService; // eslint-disable-line no-use-before-define
    Model.getFieldValues = getFieldValues; // eslint-disable-line no-use-before-define
    Model.populateAddressFields = populateAddressFields; // eslint-disable-line no-use-before-define
    Model.processResponse = processResponse; // eslint-disable-line no-use-before-define
    Model.setCurrentForm = setCurrentForm; // eslint-disable-line no-use-before-define
    Model.assignListeners = assignListeners; // eslint-disable-line no-use-before-define
    Model.updateEventBindings = updateEventBindings; // eslint-disable-line no-use-before-define
    Model.onFieldBlur = onFieldBlur; // eslint-disable-line no-use-before-define
    Model.verifyCountryCode = verifyCountryCode; // eslint-disable-line no-use-before-define

    /**
    * @private init
    * Initializes the address completion
    */
    function init() {
    // Stop if no service URL is found
        if (!Model.addressServiceUrl) {
            return;
        }

        Model.setCurrentForm();

        // Stop if no form is found.
        if (!Model.currentForm) {
            return;
        }

        Model.assignListeners();
        Model.verifyCountryCode(Model.currentForm);
        Model.currentForm.on(events.change, selectors.address.country, Model.updateEventBindings);
    }

    /**
    * @private assignListeners
    * Assigns listeners to address completion fields
    */
    function assignListeners() {
        Model.addressCompletionFields.forEach(function (field) {
            Model.currentForm.on(events.blur, field, Model.onFieldBlur);
        });
    }

    /**
    * @private updateEventBindings
    * @param {event} e
    * Checks country code and updates the modal
    */
    function updateEventBindings(e) {
        Model.currentForm = $(e.delegateTarget);
        Model.verifyCountryCode();

        // If country is selected after postal code and house number are added,
        // trigger a blur in order to trigger a call for the address completion
        var postalCodeSelector = Model.addressCompletionFields[0];
        var $postalCodeField = Model.currentForm.find(postalCodeSelector);

        if ($postalCodeField[0] && $postalCodeField.eq(0).val().length > 0) {
            $postalCodeField.trigger(events.blur);
        }
    }

    /**
    * @private onFieldBlur
    * On blur, check if the required fields have values and call the address completion service
    */
    function onFieldBlur() {
        var values = Model.getFieldValues();
        var fieldsReady = values.filter(function (value) {
            return value && value.length !== 0;
        }).length === Model.addressCompletionFields.length;

        // proceed if all required fields are filled in and country is nl
        if (fieldsReady && Model.isCountryNL) {
            // check if the results are already cached
            if (Object.prototype.hasOwnProperty.call(Model.cachedResults, Model.locationKey)) {
                Model.populateAddressFields(Model.cachedResults[Model.locationKey]);
            } else {
                Model.completeAddressService.apply(this, values)
                    .then(Model.processResponse)
                    .fail(function () {
                        console.error('Address completion: could not get data'); // eslint-disable-line no-console
                    });
            }
        }
    }

    /**
    * @private getFieldValues
    * @returns {Array<string>} a list of field values
    */
    function getFieldValues() {
        var id = '';
        var fieldValues = Model.addressCompletionFields.map(function (field) {
            var value = Model.currentForm.find(field).val();
            if (value) {
            	id += value.replace(/ /g, '').toLowerCase();
            }
            return value;
        });
        Model.locationKey = id;
        return fieldValues;
    }

    /**
    * @private populateAddressFields
    * @param {Object} response
    * Populates the address fields with the retrieved response
    */
    function populateAddressFields(response) {
        if (response && response.success && response.address) {
            Model.currentForm.find(selectors.address.street).val(response.address.street);
            Model.currentForm.find(selectors.address.city).val(response.address.city);

            if (response.address.addition && selectors.address.addition) {
                Model.currentForm.find(selectors.address.addition).val(response.address.addition);
            }
        }
    }

    /**
    * @private clearAddressFields
    * Clears the street, city and addition fields
    */
    function clearAddressFields() {
        Model.currentForm.find(selectors.address.street).val('');
        Model.currentForm.find(selectors.address.city).val('');

        if (selectors.address.addition) {
            Model.currentForm.find(selectors.address.addition).val('');
        }
    }

    /**
    * @private processResponse
    * @param {Object} resp - Response
    */
    function processResponse(resp) {
    // cache results if success response
        if (resp.success) {
            Model.cachedResults[Model.locationKey] = resp;
            Model.cachedResults[Model.locationKey].success = true;
            Model.populateAddressFields(resp);
        } else {
            // no address found, clear previous result
            Model.cachedResults[Model.locationKey] = {
                success: false,
                address: {
                    street: '',
                    city: '',
                    addition: ''
                }
            };
        }
    }

    /**
    * @private completeAddressService
    * @param {string} postalCode - The postal code
    * @param {string} houseNumber - The house number
    * @param {string} country - The house number
    * @returns {Promise|Object};
    */
    function completeAddressService(postalCode, houseNumber, country) {
        if (!postalCode || !houseNumber || !country) {
            return $.promise({});
        }

        var params = {
            country: country,
            postalCode: postalCode,
            houseNbr: houseNumber
        };

        return $.get(Model.addressServiceUrl, params);
    }

    /**
    * @private verifyCountryCode
    * Verify that call to paazl should be made.
    */
    function verifyCountryCode() {
        var $countryFieldEl = Model.currentForm.find(selectors.address.country);
        Model.isCountryNL = $countryFieldEl && $countryFieldEl.val() && $countryFieldEl.val().toLowerCase() === 'nl';
    }

    /**
    * @private setCurrentForm
    * Sets the currentForm.
    */
    function setCurrentForm() {
        Model.currentForm = $(Model.scope).eq(0);
    }

    init();
}

module.exports = {
    assign: assign
};
