/**
* saveProductImageAssignments
* ---------------------------
* This script is used to save and archive a JSON representation of the product image assignments
* currated through the Scene 7 recipe assignment toolset.  The script accepts a JSON string representation 
* of the image assignments and archives it for future reference and processing.
* 
* @input	productCode : String representing the product-code to which the associated image assignments will be applied
* @input 	imageAssignments : String containing the JSON representation of the style's image assignments
* @input 	generateExport : String describes if this process should generate an export instead of a save
* @output 	json : String object describing whether the save / processing was successful or not
*
*/

// Initialize packages to import
importPackage( dw.system );
importPackage( dw.util );

// Initialize the specific-helpers to import
importScript( "UAS7:ProductImageXMLHelper.ds" );

// This function archives a collection of product-specific image assignments to the "ProductImageAssignmentsAuditHistory" collection.
function execute( args : PipelineDictionary ) : void
{

	// Initialize local variables in use by this service
	var imageAssignments, currentDate, siteId, pxh, outputObj, logger, userName, pk, productImageAssignment;

	// Initialize the output object that will be returned to the user
	outputObj = { RESULT: false };

	// Initialize the Recipe Manager logging debugger	
	logger = Logger.getLogger( "UAS7.PIA" );	
			
	// Initialize the reference to the product image XML helper
	pxh = new ProductImageXMLHelper();	

	try{

		// Parse out the recipe definition
		imageAssignments = JSON.parse(args.imageAssignments);

		// Create an instance of the current date
		currentDate = new Date().toISOString();

		// Create an instance of the current site
		siteId = dw.system.Site.getCurrent().ID;	
		
		// Reference the userName associated to this user
		userName = session.getUserName();
			
		////////////////////////////////////////////
		// Generate the Product Image XML
		////////////////////////////////////////////					
		
		// Create the primary key representation of this product / image assignment
		pk = pxh.queueImageAssignments(imageAssignments, args.generateExport);
			
		////////////////////////////////////////////
		// Archive the Product / Image Assignment
		////////////////////////////////////////////		

		// Only archive non-exports
		if ( args.generateExport === 'false' ) {
			
			// Create an instance of the custom object that will be used to record this product / image assignment
			productImageAssignment = dw.object.CustomObjectMgr.createCustomObject("ProductImageAssignments", pk); 	
		
			// Define the properties of the imageAssigment record
			productImageAssignment.custom["ASSIGNMENTID"] = pk;
			productImageAssignment.custom["IMAGEASSIGNMENTJSON"] = args.imageAssignments;
			productImageAssignment.custom["PRODUCTCODE"] = args.productCode;
			productImageAssignment.custom["SITEID"] = siteId;
			productImageAssignment.custom["USERNAME"] = userName;
			
		}	
			
		// Flag that the save was succcessful
		outputObj["RESULT"] = true;		

		// If this is an export, then tag the output as such
		if ( args.generateExport === 'true' ) {
			outputObj["EXPORT"] = true;		
		}

	} catch(e) {
		
		// If an error is caught, output it
		trace(e);
		
		// Debugging: Capture the error
		var localError = e;
			
		// This will get outputed via the /ajax/jsonOutput template.
		outputObj["RESULT"] = false;
		outputObj["ERRORMESSAGE"] = e.message;			

		// Debugging: Capture the error message for the exception that was caught
		logger.debug("ProductImageAssignments - Error:" + e.message);
				
	}

	// Take the recipe categories array, and convert it to JSON
	var jsonString : String = JSON.stringify(outputObj);

	// Output the return result
	args.json = jsonString;
	
	// Continue processing the pipeline
    return PIPELET_NEXT;
   
}