/**
* getProductImageDefinitions
* --------------------------
* This script is used to retrieve the product image definitions for each of the product codes specified.  For each product
* code, the material asset definitions (material code, image view-type, and image urls) will be returned by this service.
*
* @input 	productCodes : String containing the JSON representation of the product style / material codes to process.
* @input 	defaultViewType : String describing the default view type that will be returned by the service (ex. pdpMainDesktop).
* @output 	json : Object Output object describing whether the save was successful or not
*
*/

// Initialize packages to import
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.catalog );

// Initialize the specific-helpers to import
importScript( "UAS7:ProductImageHelper.ds" );

// This function retrieves the definition for a given recipe category / view-type combination, and returns a JSON document representing the definition.
function execute( args : PipelineDictionary ) : void
{

	// Initialize the output object that will be serialized
	var outputObj = {};		

	// Initialize the Check for New Images logging debugger	
	var logger = Logger.getLogger( "UAS7.CNI" );	

	// Initialize the reference to the product Image Helper
	var pih = new ProductImageHelper();

	// Initialize the reference to the produtManager
	var pm = dw.catalog.ProductMgr;	

	// Initialize the variable to temporarily store product image definitions
	var productImages;

	try{

		// Capture the service arguments / Why do we need to parse the product codes twice?
		var productCodesArray = args.productCodes.split(",");

		// Initialize the images node
		outputObj["PRODUCTCODES"] = {};
				
		// Iterate over the array, and retrieve the product definition for each 
		productCodesArray.forEach ( function (thisElement) {

			// Retrieve the images for each product code
			productImages = pih.getProductImages(thisElement, false, args.defaultViewType);

			// If an invalid material was processed, then move onto the next item
			if ( productImages.hasOwnProperty("invalidMaterial") ) {
			
				// Check and see if the output object already has an invalid materials collection
				if ( !outputObj.hasOwnProperty("INVALIDMATERIALS") )  outputObj["INVALIDMATERIALS"] = [];	
				
				// Append the current material to the invalid materials output
				outputObj["INVALIDMATERIALS"].push(productImages.invalidMaterial);
				
				// Exit the loop
				return;
				
			}

			// If an invalid style was processed, then move onto the next item
			if ( productImages.hasOwnProperty("invalidStyle") ) {
			
				// Check and see if the output object already has an invalid styles collection
				if ( !outputObj.hasOwnProperty("INVALIDSTYLES") )  outputObj["INVALIDSTYLES"] = [];	
				
				// Append the current style to the invalid styles output
				outputObj["INVALIDSTYLES"].push(productImages.invalidStyle);
				
				// Exit the loop
				return;
				
			}

			// Initialize the productCode node of the output object
			outputObj["PRODUCTCODES"][thisElement] = {};

			// Append the default display url for the current productCode
			outputObj["PRODUCTCODES"][thisElement] = productImages;
			
		});
		
		// Initialize the output object
		outputObj["RESULT"] = true;
		
		// Include the source elements that were processed
		outputObj["SOURCE"] = productCodesArray;
		
	} catch(e) {
		
		// If an error is caught, output it
		trace(e);

		// Initialize the output object
		outputObj["RESULT"] = false;
		
		// Include the error message that was caught
		outputObj["ERRORMSG"] = e.message;
				
	}

	// Take the recipe categories array, and convert it to JSON
	var jsonString : String = JSON.stringify(outputObj);		
	
	// Seed the argument variable with the JSON string
	// This will get outputed via the /ajax/jsonOutput template.
	args.json = jsonString;
		
	// Continue processing the pipeline
    return PIPELET_NEXT;
   
}